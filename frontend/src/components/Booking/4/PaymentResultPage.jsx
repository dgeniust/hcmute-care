import React, { useState, useEffect } from 'react';
import { Result, Button, Card, Typography, Space, Divider } from 'antd';
import { CheckCircleFilled, CloseCircleFilled, HomeOutlined, CheckOutlined } from '@ant-design/icons';

const { Title, Text } = Typography;

// Component ch√≠nh
const PaymentResultPage = () => {
  // State ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin t·ª´ URL params
  const [paymentParams, setPaymentParams] = useState({});
  
  // State ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa trang th√†nh c√¥ng v√† th·∫•t b·∫°i
  const [paymentStatus, setPaymentStatus] = useState('loading');
  
  // H√†m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn
  const formatAmount = (amount) => {
    if (!amount) return '';
    // Chuy·ªÉn ƒë·ªïi t·ª´ s·ªë (VND) sang ƒë·ªãnh d·∫°ng hi·ªÉn th·ªã
    const numAmount = parseInt(amount, 10);
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' })
      .format(numAmount / 100); // VNPay tr·∫£ v·ªÅ s·ªë ti·ªÅn ƒë√£ nh√¢n 100
  };
  
  // H√†m ƒë·ªãnh d·∫°ng ng√†y gi·ªù
  const formatDateTime = (dateStr) => {
    if (!dateStr) return '';
    // Format t·ª´ YYYYMMDDHHmmss th√†nh DD/MM/YYYY HH:mm:ss
    const year = dateStr.substring(0, 4);
    const month = dateStr.substring(4, 6);
    const day = dateStr.substring(6, 8);
    const hour = dateStr.substring(8, 10);
    const minute = dateStr.substring(10, 12);
    const second = dateStr.substring(12, 14);
    return `${day}/${month}/${year} ${hour}:${minute}:${second}`;
  };
  
  // L·∫•y th√¥ng tin t·ª´ URL khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const params = {};
    for (const [key, value] of urlParams.entries()) {
      params[key] = value;
    }
    setPaymentParams(params);
  
    // ‚úÖ X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n ngay t·ª´ params
    if (params.vnp_ResponseCode === '00' && params.vnp_TransactionStatus === '00') {
      setPaymentStatus('success');
    } else {
      setPaymentStatus('failure');
    }
  
    // üéØ V·∫´n g·ªçi API ph√≠a sau ƒë·ªÉ l·∫•y chi ti·∫øt giao d·ªãch v√† l∆∞u localStorage
    const fetchPaymentData = async () => {
      const apiUrl = "http://localhost:8080/api/v1/payments/vnpay/return?" + urlParams.toString();
      try {
        const response = await fetch(apiUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${localStorage.getItem('accessToken')}`
          }
        });
  
        const result = await response.json();
  
        if (response.ok && result?.status === 200) {
          localStorage.setItem('paymentData', JSON.stringify(result.data));
        } else {
          console.warn('Kh√¥ng t√¨m th·∫•y chi ti·∫øt giao d·ªãch t·ª´ API.');
        }
      } catch (error) {
        console.error('L·ªói khi g·ªçi API thanh to√°n:', error);
      }
    };
  
    fetchPaymentData();
  }, []);
  
  
//   useEffect(() => {
//     const searchParams = window.location.search; // l·∫•y ph·∫ßn ?vnp_Amount=...&vnp_...

//     const apiUrl = "http://localhost:8080/api/v1/payments/vnpay/return" + searchParams;
//     const fetchPaymentData = async () => {
//         try {
//             const response = await fetch(apiUrl, {
//                 method: 'GET',
//                 headers: {
//                     'Content-Type': 'application/json',
//                     Authorization: `Bearer ${localStorage.getItem('accessToken')}`
//                 },
//             });
        
//             if (!response.ok) {
//                 const errorText = await response.text();
//                 console.error("Error fetching payment data:", errorText);
        
//                 if (response.status === 404 && retryCount < 3) {
//                     setTimeout(() => fetchPaymentData(retryCount + 1), 1000);
//                     return;
//                 }
        
//                 handleHttpStatusCode(response.status, "", errorText, messageApi );
//                 return;
//             }
        
//             let data;
//             try {
//                 data = await response.json();
//             } catch (jsonErr) {
//                 console.error('L·ªói parse JSON:', jsonErr);
//                 notifyErrorWithCustomMessage('L·ªói x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ m√°y ch·ªß', messageApi);
//                 return;
//             }
        
//             console.log("Payment data:", data);
//             if (data && data.status === 200) {
//                 setPaymentData(data.data);
//                 notifySuccessWithCustomMessage('Thanh to√°n th√†nh c√¥ng', messageApi);
//             } else {
//                 notifyErrorWithCustomMessage('Kh√¥ng t√¨m th·∫•y giao d·ªãch ho·∫∑c giao d·ªãch kh√¥ng h·ª£p l·ªá', messageApi);
//             }
        
//         } catch (error) {
//             console.error('L·ªói m·∫°ng ho·∫∑c server:', error.message || error);
//             notifyErrorWithCustomMessage('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n', messageApi);
//         }
        
//     }
//     fetchPaymentData();
// }, []);
  
  // H√†m ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang ƒë√£ ho√†n th√†nh ƒë·∫∑t ch·ªó
  const redirectToCompletedBooking = () => {
    // Trong d·ª± √°n th·ª±c t·∫ø, s·∫Ω s·ª≠ d·ª•ng useNavigate ho·∫∑c window.location
    console.log('ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn /completed-booking');
    window.location.href = '/completed-booking';
  };

  // H√†m ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang ch·ªß
  const goToHome = () => {
    window.location.href = '/';
  };

  // H√†m quay l·∫°i trang thanh to√°n
  const goToPayment = () => {
    window.location.href = '/payment';
  };

  // X√¢y d·ª±ng th√¥ng tin thanh to√°n t·ª´ params
  const paymentInfo = {
    orderId: paymentParams.vnp_TxnRef || '',
    amount: formatAmount(paymentParams.vnp_Amount) || '',
    time: formatDateTime(paymentParams.vnp_PayDate) || '',
    method: 'VNPay ' + (paymentParams.vnp_CardType || 'QR'),
    bankCode: paymentParams.vnp_BankCode || '',
    transactionId: paymentParams.vnp_TransactionNo || ''
  };

  // Component hi·ªÉn th·ªã th√¥ng tin thanh to√°n
  const PaymentDetails = () => (
    <Card className="mt-4 w-full">
      <Space direction="vertical" className="w-full">
        <div className="flex justify-between">
          <Text strong>M√£ ƒë∆°n h√†ng:</Text>
          <Text>{paymentInfo.orderId}</Text>
        </div>
        <div className="flex justify-between">
          <Text strong>S·ªë ti·ªÅn:</Text>
          <Text className="text-red-500 font-bold">{paymentInfo.amount}</Text>
        </div>
        <div className="flex justify-between">
          <Text strong>Th·ªùi gian:</Text>
          <Text>{paymentInfo.time}</Text>
        </div>
        <div className="flex justify-between">
          <Text strong>Ph∆∞∆°ng th·ª©c:</Text>
          <Text>{paymentInfo.method}</Text>
        </div>
        <div className="flex justify-between">
          <Text strong>Ng√¢n h√†ng:</Text>
          <Text>{paymentInfo.bankCode}</Text>
        </div>
        <div className="flex justify-between">
          <Text strong>M√£ giao d·ªãch:</Text>
          <Text>{paymentInfo.transactionId}</Text>
        </div>
      </Space>
    </Card>
  );

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center py-8 px-4 w-full">
      
      {/* Loading state */}
      {paymentStatus === 'loading' && (
        <Card className="w-full max-w-md shadow-md text-center">
          <Title level={3}>ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n...</Title>
          <div className="py-6">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</div>
        </Card>
      )}

      {/* Trang thanh to√°n th√†nh c√¥ng */}
      {paymentStatus === 'success' && (
        <Card className="w-full max-w-md shadow-md">
          <Result
            icon={<CheckCircleFilled className="text-green-500 text-6xl" />}
            title={<Title level={3} className="text-green-500">Thanh to√°n th√†nh c√¥ng</Title>}
            subTitle="C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i"
            extra={[
              <PaymentDetails key="details" />,
              <Divider key="divider" />,
              <div key="buttons" className="flex flex-col space-y-2">
                <Button 
                  type="primary" 
                  size="large" 
                  icon={<CheckOutlined />} 
                  onClick={redirectToCompletedBooking}
                  className="bg-green-500 hover:bg-green-600"
                  block
                >
                  X√°c nh·∫≠n v√† ti·∫øp t·ª•c
                </Button>
                <Button 
                  type="default" 
                  size="large" 
                  icon={<HomeOutlined />} 
                  onClick={goToHome}
                  block
                >
                  V·ªÅ trang ch·ªß
                </Button>
              </div>
            ]}
          />
        </Card>
      )}

      {/* Trang thanh to√°n th·∫•t b·∫°i */}
      {paymentStatus === 'failure' && (
        <Card className="w-full max-w-md shadow-md">
          <Result
            icon={<CloseCircleFilled className="text-red-500 text-6xl" />}
            title={<Title level={3} className="text-red-500">Thanh to√°n th·∫•t b·∫°i</Title>}
            subTitle="ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i."
            extra={[
              <Card key="error-info" className="mt-4 w-full bg-red-50">
                <Space direction="vertical" className="w-full">
                  <div className="flex justify-between">
                    <Text strong>M√£ l·ªói:</Text>
                    <Text type="danger">{paymentParams.vnp_ResponseCode || 'VNPAY-E005'}</Text>
                  </div>
                  <div className="flex justify-between">
                    <Text strong>M√¥ t·∫£:</Text>
                    <Text type="danger">Giao d·ªãch kh√¥ng th√†nh c√¥ng</Text>
                  </div>
                  <div className="flex justify-between">
                    <Text strong>M√£ ƒë∆°n h√†ng:</Text>
                    <Text>{paymentParams.vnp_TxnRef || ''}</Text>
                  </div>
                </Space>
              </Card>,
              <Divider key="divider" />,
              <div key="buttons" className="flex flex-col space-y-2">
                <Button 
                  type="primary" 
                  size="large" 
                  danger
                  onClick={goToPayment}
                  block
                >
                  Th·ª≠ l·∫°i
                </Button>
                <Button 
                  type="default" 
                  size="large" 
                  icon={<HomeOutlined />} 
                  onClick={goToHome}
                  block
                >
                  V·ªÅ trang ch·ªß
                </Button>
              </div>
            ]}
          />
        </Card>
      )}
    </div>
  );
};

export default PaymentResultPage;